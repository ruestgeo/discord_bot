node version 12.16.2
discord.js version 12.2.0

--NOTE: auth.json and googleClientSecret.json  have sensitive data and are confidential, do not share them with anyone.  It may also be of interest to not share configs.json  although the data is less sensitive


https://discord.js.org/#/docs/main/stable/general/welcome


https://www.youtube.com/watch?v=UGN6EUi4Yio
https://www.npmjs.com/package/google-spreadsheet  //used
https://developers.google.com/sheets/api/quickstart/nodejs  //not used
https://console.developers.google.com/   //for setup (enable drive and sheets API and obtain clientSecret)



https://moment.github.io/luxon/index.html




npm install discord.js --save
npm install google-spreadsheet --save

npm install luxon --save


https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows
https://github.com/coreybutler/nvm-windows/releases/download/1.1.7/nvm-setup.zip























================================

//botVerifyConfigs --
//botConfigsVerified 10% [10/100]
//botLogsSetup --
//botLogsReady 10% [20/100]
//botAcquiringCommands --  (emit # of files)
//botAcquiredCommands 25% [45/100]
//botAcquiringReactables --  (emit # of files)
//botAcquiredReactables 10% [55/100]
//botRunningStartup -- (emit # of funcs)
//botStartupDone 30% [85/100]
//BotLogin --
//botReady 15% [100/100]

//botRunningShutdown -- (emit # of funcs)
//botShutdownDone 80%  [80/100]
//botExit 20% [100/100]

================================

//appendFileSync should be fine to use multiple times (js is single-thread exec)

var printLock = false;
const printLockEmitter = new EventEmitter();

    botLogs: function (globals, content){
        if (globals.LogsToFile){
            while (printLock){
                await new Promise(resolve => printLockEmitter.once('unlocked', resolve));
            }
            printLock = true;
            fs.appendFileSync(globals.logsPath+globals.logsFileName, content+"\n");
            printLock = false;
            printLockEmitter.emit("printUnlocked");
        }
        console.log(content);
    },

================================

//globals["queue"] =  new utils.Queue(configs.workQueueCapacity);

================================

//if (!globals) throw new Error("'globals' undefined");

================================

//removed cond-var-emitter lock in favor of async-mutex

//const EventEmitter = require('events');
const workLockEmitter = new EventEmitter();

    acquire_work_lock: async function(globals, requester){
        // await acquire_work_lock or  acquire_work_lock(~~).then(_ => { do stuff })
        console.log("* attempting to acquire work lock for "+requester+" *");
        while (globals.busy) {
            console.log("* work lock still active, waiting for unlock for "+requester+" *");
            await new Promise(resolve => workLockEmitter.once('unlocked', resolve));
        }
        globals.busy = true;
        workLockEmitter.emit('locked');
        this.botLogs(globals, "* acquired work lock for "+requester+" *");
        
    },
    
    release_work_lock: function(globals, holder){
        if (!globals.busy) return;
        this.botLogs(globals, "* releasing work lock for "+holder+" *");
        globals.busy = false;
        workLockEmitter.emit('unlocked');
    },

================================
================================
================================
================================





















