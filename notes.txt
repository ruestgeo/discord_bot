node version 12.16.2
discord.js version 12.2.0

--NOTE: auth.json and googleClientSecret.json  have sensitive data and are confidential, do not share them with anyone.  It may also be of interest to not share configs.json  although the data is less sensitive


https://discord.js.org/#/docs/main/stable/general/welcome


https://www.youtube.com/watch?v=UGN6EUi4Yio
https://www.npmjs.com/package/google-spreadsheet  //used
https://developers.google.com/sheets/api/quickstart/nodejs  //not used
https://console.developers.google.com/   //for setup (enable drive and sheets API and obtain clientSecret)

https://www.sqlitetutorial.net/sqlite-nodejs/

https://moment.github.io/luxon/index.html




npm install discord.js --save
npm install google-spreadsheet --save
npm install sqlite3 --save
npm install luxon --save


https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows
https://github.com/coreybutler/nvm-windows/releases/download/1.1.7/nvm-setup.zip























================================//aimed to use to determine whether a bot was already online before starting the current one
"bot_id": "(UNUSED) bot userID / clientID (can find in general info on discord dev applications site or rightclick bot in user list on a server and [copy ID])",

================================//not clear on actual usage, maybe emote deletion? dont really need it anyway

                    /* reaction is disposed? */
                    collector.on('dispose', (reaction, user) => { //dispose event is not being fired on emoji complete removal
                        console.log("\ncollected a disposed reaction");
                        console.log("user ["+user.username+":"+user.id+"]");
                        console.log("  removed reaction ["+reaction.emoji.name+":"+reaction.emoji.id+"]");
                        console.log("  on message ["+reaction.message.id+"]");
                        if (reaction.emoji.id) { //not null -> custom
                            var react_emote = reaction.emoji.id;
                        }
                        else { //null -> unicode
                            var react_emote = reaction.emoji.name;
                        }
                        var role_to_assign = reactroles[reaction.message.guild.id][reaction.message.channel.id][reaction.message.id]['emotes'][react_emote];
                        console.log("role to remove: "+role_to_assign);

                        var self_remove = (user.id === reaction.client.user.id);
                        console.log("user id: "+user.id);
                        console.log("reaction user id: "+reaction.client.user.id);
                        console.log("user removing own reaction: "+self_remove);
                        
                        //restart reaction
                        reaction.message.react(react_emote);
                        console.log("--replaced base emote");
                    });

=====================================
//for testing 
    msg.guild.channels.resolve("").messages.fetch("")
    .then(message => {
        console.log(message.author.username+":"+message.author.id);
        console.log(message.content);
    })
    .catch(console.error);

======================================
//switched design from give role then delete rest to delete all then give role
if ( role_to_assign !== current_group[( reactrole_group.includes(msg_react.emoji.id) 
                                    ? msg_react.emoji.id // if id key exists then use id as key
                                    : msg_react.emoji.name )] )  //if name key exists then use name as key
                                //role is the newly added role (if emotes have the same role assignment)
                                {
                                    //re-add role?
                                }

========================================
//discontinued development for using writestreams in favor of writeFileSync

globals["logsFile"] = null; //open file handler when command is being processed, close it on error or finish

    obtain_log_file: function (globals){ //unused (to be removed later)
        var configs = globals.configs;

        if ((configs.logsFileMode !== "none") || (configs.logsFileMode !== "")){
            //setup to append to logsFile and set configs.logsFile from configs.logsFileName
            let logsStream = fs.createWriteStream(configs.logsPath+configs.logsFileName,  {flags:'a'});

            logsStream.on('finish', () => {
                console.log('//finished writing logs to file');
                console.log(globals.logsFile);
                globals.logsFile = null;
                console.log(globals.logsFile);
            });
            logsStream.on('error', () => {
                console.log('//error when writing logs to file');
                console.log(globals.logsFile);
                globals.logsFile = null;
                console.log(globals.logsFile);
            });
        } 
        //else ignore
    },

    close_log_file: function (globals){//unused (to be removed later)
        //set logsFile to null
    },

    botLogs: function (globals, content){
        if (globals.LogsToFile){
            var file = globals.logsFile;
            if (file == null){
                console.log("## error: logsfile handle is null, retrying");
                this.obtain_log_file(globals);
                this.botLogs(globals, content);
                return;
            }
            //record to file TODO
        }
        console.log(content);
    },



    function logInterval(globals){
    try{
        var date = utils.getDateTime(globals);
        var oldLogsFileName = globals.logsFileName;
        var newLogsFileName = "LOGS_"+date.toISO()+".txt";
        if (globals.logsFile != null){ //unused (to be removed later)
            console.log("\n\nSwitching to new logs file with name:  LOGS_"+date.toISO()+".txt"); //write to old file which is currently open
            globals["logsFileName"] = newLogsFileName;
        }
        else { //file not currently being written to 
            globals["logsFileName"] = newLogsFileName;    
            fs.writeFileSync(logsPath+oldLogsFileName, "\n\nSwitching to new logs file with name:  LOGS_"+date.toISO()+".txt");
        }
        fs.writeFileSync(logsPath+newLogsFileName, "\n\n\n\n\nCreating new logs file  [LOGS_"+date.toISO()+".txt]\n    "+utils.getDateTimeString(globals)+"\n\n\n\n");
    }
    catch (err){
        console.log("## ERR occurred during 24hour new logs file interval");
    }
}



========================================
//bad format (changed to async and await but dont need nesting anymore)

status_blink: async function(globals){
        var client = globals.client;
        var configs = globals.configs;
        console.log("blink online");
        await client.user.setStatus('online') //blink 1
        .then(async (_) => {
            console.log("blink pause");
            await this.sleep(1000) //sleep 1
            .then(async (_) => {
                console.log("blink dnd");
                await client.user.setStatus('dnd') //blink 2
                .then(async (_) => {
                    console.log("blink pause");
                    await this.sleep(1000) //sleep 2
                    .then(async (_) => {
                        console.log("blink online");
                        await client.user.setStatus('online') //blink 3
                        .then(async (_) => {
                            console.log("blink pause");
                            await this.sleep(1000) //sleep 3
                            .then(async (_) => {
                                console.log("blink dnd");
                                await client.user.setStatus('dnd') //blink 4
                                .then(async (_) => {
                                    console.log("blink pause");
                                    await this.sleep(1000) //sleep 4
                                    .then(async (_) => {
                                        console.log("blink return");
                                        await this.change_status(client, 'idle', configs.idleStatusText)
                                        .catch(err => { this.botLogs(globals,"## err occured on returning status in status_blink: "+err); })
                                        .finally(_ => { this.work_Unlock(globals); }); 
                                    });
                                })
                                .catch(err => { console.log("## err in status_blink ::  "+err); this.work_Unlock(globals);})
                            });
                        })
                        .catch(err => { console.log("## err in status_blink ::  "+err); this.work_Unlock(globals);})
                    });
                })
                .catch(err => { console.log("## err in status_blink ::  "+err); this.work_Unlock(globals);})
            });
        })
        .catch(err => { console.log("## err in status_blink ::  "+err); this.work_Unlock(globals);});
        return true;
    },


========================================























